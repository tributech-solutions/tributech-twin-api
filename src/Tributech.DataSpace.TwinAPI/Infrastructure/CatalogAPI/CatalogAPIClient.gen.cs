//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Tributech.Dsk.Api.Clients.CatalogApi {
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class CatalogAPIClient {
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public CatalogAPIClient(System.Net.Http.HttpClient httpClient) {
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
		}

		private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings() {
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);


		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
		/// <returns>Returns the requested model entity based on its dtmi.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<ModelEntity> ManageServicesAsync(string dtmi) {
			return ManageServicesAsync(dtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns the requested model entity based on its dtmi.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ModelEntity> ManageServicesAsync(string dtmi, System.Threading.CancellationToken cancellationToken) {
			if (dtmi == null)
				throw new System.ArgumentNullException("dtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("manage/services/{dtmi}");
			urlBuilder_.Replace("{dtmi}", System.Uri.EscapeDataString(ConvertToString(dtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<ModelEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns all stored model entities.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Response> ManageModelsGetAsync(double size, double page) {
			return ManageModelsGetAsync(size, page, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns all stored model entities.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Response> ManageModelsGetAsync(double size, double page, System.Threading.CancellationToken cancellationToken) {
			if (size == null)
				throw new System.ArgumentNullException("size");

			if (page == null)
				throw new System.ArgumentNullException("page");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("manage/models?");
			urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>The record has been successfully created.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelEntity>> ManageModelsPostAsync(System.Collections.Generic.IEnumerable<Interface> body) {
			return ManageModelsPostAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>The record has been successfully created.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ModelEntity>> ManageModelsPostAsync(System.Collections.Generic.IEnumerable<Interface> body, System.Threading.CancellationToken cancellationToken) {
			if (body == null)
				throw new System.ArgumentNullException("body");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("manage/models");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ModelEntity>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>The model has been successfully added.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<ModelEntity> ManageModelAsync(Interface body) {
			return ManageModelAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>The model has been successfully added.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ModelEntity> ManageModelAsync(Interface body, System.Threading.CancellationToken cancellationToken) {
			if (body == null)
				throw new System.ArgumentNullException("body");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("manage/model");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 201) {
							var objectResponse_ = await ReadObjectResponseAsync<ModelEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>The model has been successfully added.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<ModelEntity> ManageServicesRevokeAsync(string dtmi) {
			return ManageServicesRevokeAsync(dtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>The model has been successfully added.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ModelEntity> ManageServicesRevokeAsync(string dtmi, System.Threading.CancellationToken cancellationToken) {
			if (dtmi == null)
				throw new System.ArgumentNullException("dtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("manage/services/{dtmi}/revoke");
			urlBuilder_.Replace("{dtmi}", System.Uri.EscapeDataString(ConvertToString(dtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
					request_.Method = new System.Net.Http.HttpMethod("PUT");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 202) {
							var objectResponse_ = await ReadObjectResponseAsync<ModelEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns all stored models in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Response2> GraphExpandedAsync(double size, double page) {
			return GraphExpandedAsync(size, page, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns all stored models in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Response2> GraphExpandedAsync(double size, double page, System.Threading.CancellationToken cancellationToken) {
			if (size == null)
				throw new System.ArgumentNullException("size");

			if (page == null)
				throw new System.ArgumentNullException("page");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/expanded?");
			urlBuilder_.Append(System.Uri.EscapeDataString("size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Append(System.Uri.EscapeDataString("page") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns root models in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpandedInterface>> GraphRootsAsync() {
			return GraphRootsAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns root models in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpandedInterface>> GraphRootsAsync(System.Threading.CancellationToken cancellationToken) {
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/roots");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExpandedInterface>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns root models with their children in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InterfaceWithChildren>> GraphRootswithchildrenAsync() {
			return GraphRootswithchildrenAsync(System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns root models with their children in their expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InterfaceWithChildren>> GraphRootswithchildrenAsync(System.Threading.CancellationToken cancellationToken) {
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/rootswithchildren");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InterfaceWithChildren>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns a model in its expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpandedInterface>> GraphExpandAsync(string dtmi) {
			return GraphExpandAsync(dtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns a model in its expanded representation.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ExpandedInterface>> GraphExpandAsync(string dtmi, System.Threading.CancellationToken cancellationToken) {
			if (dtmi == null)
				throw new System.ArgumentNullException("dtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/{dtmi}/expand");
			urlBuilder_.Replace("{dtmi}", System.Uri.EscapeDataString(ConvertToString(dtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ExpandedInterface>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns the possible relationships between two models.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Relationship>> GraphRelationshipsAsync(string sourceDtmi, string targetDtmi) {
			return GraphRelationshipsAsync(sourceDtmi, targetDtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns the possible relationships between two models.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Relationship>> GraphRelationshipsAsync(string sourceDtmi, string targetDtmi, System.Threading.CancellationToken cancellationToken) {
			if (sourceDtmi == null)
				throw new System.ArgumentNullException("sourceDtmi");

			if (targetDtmi == null)
				throw new System.ArgumentNullException("targetDtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/relationships/{sourceDtmi}/{targetDtmi}");
			urlBuilder_.Replace("{sourceDtmi}", System.Uri.EscapeDataString(ConvertToString(sourceDtmi, System.Globalization.CultureInfo.InvariantCulture)));
			urlBuilder_.Replace("{targetDtmi}", System.Uri.EscapeDataString(ConvertToString(targetDtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Relationship>>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns a model based on its dtmi</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<Interface> GraphAsync(string dtmi) {
			return GraphAsync(dtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns a model based on its dtmi</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Interface> GraphAsync(string dtmi, System.Threading.CancellationToken cancellationToken) {
			if (dtmi == null)
				throw new System.ArgumentNullException("dtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("graph/{dtmi}");
			urlBuilder_.Replace("{dtmi}", System.Uri.EscapeDataString(ConvertToString(dtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<Interface>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <returns>Returns a JSON schema for the requested model</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<JSONSchema4> ValidateSchemaAsync(string dtmi) {
			return ValidateSchemaAsync(dtmi, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Returns a JSON schema for the requested model</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<JSONSchema4> ValidateSchemaAsync(string dtmi, System.Threading.CancellationToken cancellationToken) {
			if (dtmi == null)
				throw new System.ArgumentNullException("dtmi");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("validate/schema/{dtmi}");
			urlBuilder_.Replace("{dtmi}", System.Uri.EscapeDataString(ConvertToString(dtmi, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<JSONSchema4>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <summary>Validate twin instance</summary>
		/// <returns>Returns validation result for instance.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<SchemaValidationError> ValidateAsync(BaseDigitalTwin body) {
			return ValidateAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Validate twin instance</summary>
		/// <returns>Returns validation result for instance.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<SchemaValidationError> ValidateAsync(BaseDigitalTwin body, System.Threading.CancellationToken cancellationToken) {
			if (body == null)
				throw new System.ArgumentNullException("body");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("validate");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SchemaValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		/// <summary>Validate twin graph</summary>
		/// <returns>Returns validation result for twin graph.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public System.Threading.Tasks.Task<SchemaValidationError> ValidateGraphAsync(DigitalTwinModel body) {
			return ValidateGraphAsync(body, System.Threading.CancellationToken.None);
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <summary>Validate twin graph</summary>
		/// <returns>Returns validation result for twin graph.</returns>
		/// <exception cref="ApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<SchemaValidationError> ValidateGraphAsync(DigitalTwinModel body, System.Threading.CancellationToken cancellationToken) {
			if (body == null)
				throw new System.ArgumentNullException("body");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("validate/graph");

			var client_ = _httpClient;
			var disposeClient_ = false;
			try {
				using (var request_ = new System.Net.Http.HttpRequestMessage()) {
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);

					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					var disposeResponse_ = true;
					try {
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null) {
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200) {
							var objectResponse_ = await ReadObjectResponseAsync<SchemaValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
							if (objectResponse_.Object == null) {
								throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else {
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally {
						if (disposeResponse_)
							response_.Dispose();
					}
				}
			}
			finally {
				if (disposeClient_)
					client_.Dispose();
			}
		}

		protected struct ObjectResponseResult<T> {
			public ObjectResponseResult(T responseObject, string responseText) {
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken) {
			if (response == null || response.Content == null) {
				return new ObjectResponseResult<T>(default(T), string.Empty);
			}

			if (ReadResponseAsString) {
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try {
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else {
				try {
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader)) {
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception) {
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo) {
			if (value == null) {
				return "";
			}

			if (value is System.Enum) {
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null) {
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null) {
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null) {
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
					return converted == null ? string.Empty : converted;
				}
			}
			else if (value is bool) {
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[]) {
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray) {
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return result == null ? "" : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ArraySchema {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ArraySchemaType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("elementSchema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string ElementSchema { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EnumValue {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("enumValue", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object EnumValue1 { get; set; } = new object();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class EnumSchema {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public EnumSchemaType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("enumValues", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<EnumValue> EnumValues { get; set; } = new System.Collections.ObjectModel.Collection<EnumValue>();

		[Newtonsoft.Json.JsonProperty("valueSchema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string ValueSchema { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MapKey {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MapValue {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class MapSchema {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public MapSchemaType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("mapKey", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public MapKey MapKey { get; set; } = new MapKey();

		[Newtonsoft.Json.JsonProperty("mapValue", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public MapValue MapValue { get; set; } = new MapValue();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Field {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ObjectSchema {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ObjectSchemaType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Field> Fields { get; set; } = new System.Collections.ObjectModel.Collection<Field>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Property {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public Type Type { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		[Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Unit { get; set; }

		[Newtonsoft.Json.JsonProperty("writable", Required = Newtonsoft.Json.Required.Always)]
		public bool Writable { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Relationship {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public RelationshipType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("maxMultiplicity", Required = Newtonsoft.Json.Required.Always)]
		public double MaxMultiplicity { get; set; }

		[Newtonsoft.Json.JsonProperty("minMultiplicity", Required = Newtonsoft.Json.Required.Always)]
		public double MinMultiplicity { get; set; }

		[Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Property> Properties { get; set; } = new System.Collections.ObjectModel.Collection<Property>();

		[Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Target { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Component {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ComponentType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Interface Schema { get; set; } = new Interface();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Command {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public CommandType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("commandType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object CommandType { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("request", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Request { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("response", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Response { get; set; } = new object();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InterfaceSchema {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InterfaceSchemaType Type { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Interface {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InterfaceType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InterfaceContext Context { get; set; }

		[Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Contents> Contents { get; set; } = new System.Collections.ObjectModel.Collection<Contents>();

		[Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> Extends { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("schemas", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<InterfaceSchema> Schemas { get; set; } = new System.Collections.ObjectModel.Collection<InterfaceSchema>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ModelEntity {
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Always)]
		public bool Active { get; set; }

		[Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Interface Model { get; set; } = new Interface();

		[Newtonsoft.Json.JsonProperty("createdTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string CreatedTime { get; set; }

		[Newtonsoft.Json.JsonProperty("modifiedTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string ModifiedTime { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class PagedResult {
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> Data { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
		public double TotalCount { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Telemetry {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public Type2 Type { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		[Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Unit { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ExpandedInterface {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExpandedInterfaceType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public ExpandedInterfaceContext Context { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		[Newtonsoft.Json.JsonProperty("bases", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> Bases { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Property> Properties { get; set; } = new System.Collections.ObjectModel.Collection<Property>();

		[Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Relationship> Relationships { get; set; } = new System.Collections.ObjectModel.Collection<Relationship>();

		[Newtonsoft.Json.JsonProperty("telemetries", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Telemetry> Telemetries { get; set; } = new System.Collections.ObjectModel.Collection<Telemetry>();

		[Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Component> Components { get; set; } = new System.Collections.ObjectModel.Collection<Component>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class InterfaceWithChildren {
		[Newtonsoft.Json.JsonProperty("@id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Comment { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string DisplayName { get; set; }

		[Newtonsoft.Json.JsonProperty("@type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InterfaceWithChildrenType Type { get; set; }

		[Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public InterfaceWithChildrenContext Context { get; set; }

		[Newtonsoft.Json.JsonProperty("contents", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<Contents2> Contents { get; set; } = new System.Collections.ObjectModel.Collection<Contents2>();

		[Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> Extends { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("schemas", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<InterfaceSchema> Schemas { get; set; } = new System.Collections.ObjectModel.Collection<InterfaceSchema>();

		[Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<InterfaceWithChildren> Children { get; set; } = new System.Collections.ObjectModel.Collection<InterfaceWithChildren>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class JSONSchema4 {
		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Id { get; set; }

		[Newtonsoft.Json.JsonProperty("$ref", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Ref { get; set; }

		[Newtonsoft.Json.JsonProperty("$schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schema { get; set; }

		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Title { get; set; }

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Description { get; set; }

		[Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Default { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("multipleOf", Required = Newtonsoft.Json.Required.Always)]
		public double MultipleOf { get; set; }

		[Newtonsoft.Json.JsonProperty("maximum", Required = Newtonsoft.Json.Required.Always)]
		public double Maximum { get; set; }

		[Newtonsoft.Json.JsonProperty("exclusiveMaximum", Required = Newtonsoft.Json.Required.Always)]
		public bool ExclusiveMaximum { get; set; }

		[Newtonsoft.Json.JsonProperty("minimum", Required = Newtonsoft.Json.Required.Always)]
		public double Minimum { get; set; }

		[Newtonsoft.Json.JsonProperty("exclusiveMinimum", Required = Newtonsoft.Json.Required.Always)]
		public bool ExclusiveMinimum { get; set; }

		[Newtonsoft.Json.JsonProperty("maxLength", Required = Newtonsoft.Json.Required.Always)]
		public double MaxLength { get; set; }

		[Newtonsoft.Json.JsonProperty("minLength", Required = Newtonsoft.Json.Required.Always)]
		public double MinLength { get; set; }

		[Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Pattern { get; set; }

		[Newtonsoft.Json.JsonProperty("additionalItems", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object AdditionalItems { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Items { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("maxItems", Required = Newtonsoft.Json.Required.Always)]
		public double MaxItems { get; set; }

		[Newtonsoft.Json.JsonProperty("minItems", Required = Newtonsoft.Json.Required.Always)]
		public double MinItems { get; set; }

		[Newtonsoft.Json.JsonProperty("uniqueItems", Required = Newtonsoft.Json.Required.Always)]
		public bool UniqueItems { get; set; }

		[Newtonsoft.Json.JsonProperty("maxProperties", Required = Newtonsoft.Json.Required.Always)]
		public double MaxProperties { get; set; }

		[Newtonsoft.Json.JsonProperty("minProperties", Required = Newtonsoft.Json.Required.Always)]
		public double MinProperties { get; set; }

		[Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Required { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("additionalProperties", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object AdditionalProperties { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("definitions", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Definitions { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Properties { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("patternProperties", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object PatternProperties { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Dependencies { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("enum", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> Enum { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Type { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("allOf", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> AllOf { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("anyOf", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> AnyOf { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("oneOf", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<string> OneOf { get; set; } = new System.Collections.ObjectModel.Collection<string>();

		[Newtonsoft.Json.JsonProperty("not", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public JSONSchema4 Not { get; set; } = new JSONSchema4();

		[Newtonsoft.Json.JsonProperty("extends", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Extends { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Format { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> OtherProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DigitalTwinMetadata {
		[Newtonsoft.Json.JsonProperty("$model", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[System.ComponentModel.DataAnnotations.RegularExpression(@"^dtmi:[a-z:]*;[1-99]$")]
		public string Model { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class BaseDigitalTwin {
		[Newtonsoft.Json.JsonProperty("$dtId", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string DtId { get; set; }

		[Newtonsoft.Json.JsonProperty("$etag", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Etag { get; set; }

		[Newtonsoft.Json.JsonProperty("$metadata", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public DigitalTwinMetadata Metadata { get; set; } = new DigitalTwinMetadata();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SchemaErrorObject {
		[Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Keyword { get; set; }

		[Newtonsoft.Json.JsonProperty("instancePath", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string InstancePath { get; set; }

		[Newtonsoft.Json.JsonProperty("schemaPath", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string SchemaPath { get; set; }

		[Newtonsoft.Json.JsonProperty("params", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Params { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string PropertyName { get; set; }

		[Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Message { get; set; }

		[Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Schema { get; set; } = new object();

		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public object Data { get; set; } = new object();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SchemaValidationError {
		[Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
		public bool Success { get; set; }

		[Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<SchemaErrorObject> Errors { get; set; } = new System.Collections.ObjectModel.Collection<SchemaErrorObject>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class BasicRelationship {
		[Newtonsoft.Json.JsonProperty("$relationshipId", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string RelationshipId { get; set; }

		[Newtonsoft.Json.JsonProperty("$targetId", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string TargetId { get; set; }

		[Newtonsoft.Json.JsonProperty("$sourceId", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string SourceId { get; set; }

		[Newtonsoft.Json.JsonProperty("$relationshipName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string RelationshipName { get; set; }

		[Newtonsoft.Json.JsonProperty("$etag", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Etag { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class DigitalTwinModel {
		[Newtonsoft.Json.JsonProperty("digitalTwins", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<BaseDigitalTwin> DigitalTwins { get; set; } = new System.Collections.ObjectModel.Collection<BaseDigitalTwin>();

		[Newtonsoft.Json.JsonProperty("relationships", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.ICollection<BasicRelationship> Relationships { get; set; } = new System.Collections.ObjectModel.Collection<BasicRelationship>();

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Response : PagedResult {
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ModelEntity> Data { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Response2 : PagedResult {
		[Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.ICollection<ExpandedInterface> Data { get; set; }

		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ArraySchemaType {
		[System.Runtime.Serialization.EnumMember(Value = @"Array")]
		Array = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum EnumSchemaType {
		[System.Runtime.Serialization.EnumMember(Value = @"Enum")]
		Enum = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum MapSchemaType {
		[System.Runtime.Serialization.EnumMember(Value = @"Map")]
		Map = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ObjectSchemaType {
		[System.Runtime.Serialization.EnumMember(Value = @"Object")]
		Object = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum Type {
		[System.Runtime.Serialization.EnumMember(Value = @"Property")]
		Property = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum RelationshipType {
		[System.Runtime.Serialization.EnumMember(Value = @"Relationship")]
		Relationship = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ComponentType {
		[System.Runtime.Serialization.EnumMember(Value = @"Component")]
		Component = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum CommandType {
		[System.Runtime.Serialization.EnumMember(Value = @"Command")]
		Command = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InterfaceSchemaType {
		[System.Runtime.Serialization.EnumMember(Value = @"Enum")]
		Enum = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"Map")]
		Map = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"Object")]
		Object = 2,

		[System.Runtime.Serialization.EnumMember(Value = @"Array")]
		Array = 3,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InterfaceType {
		[System.Runtime.Serialization.EnumMember(Value = @"Interface")]
		Interface = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InterfaceContext {
		[System.Runtime.Serialization.EnumMember(Value = @"dtmi:dtdl:context;2")]
		DtmiDtdlContext_2 = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contents {
		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum Type2 {
		[System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
		Telemetry = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ExpandedInterfaceType {
		[System.Runtime.Serialization.EnumMember(Value = @"Interface")]
		Interface = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum ExpandedInterfaceContext {
		[System.Runtime.Serialization.EnumMember(Value = @"dtmi:dtdl:context;2")]
		DtmiDtdlContext_2 = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InterfaceWithChildrenType {
		[System.Runtime.Serialization.EnumMember(Value = @"Interface")]
		Interface = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum InterfaceWithChildrenContext {
		[System.Runtime.Serialization.EnumMember(Value = @"dtmi:dtdl:context;2")]
		DtmiDtdlContext_2 = 0,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.4.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Contents2 {
		private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

		[Newtonsoft.Json.JsonExtensionData]
		public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
			get { return _additionalProperties; }
			set { _additionalProperties = value; }
		}


	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class ApiException : System.Exception {
		public int StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException) {
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString() {
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class ApiException<TResult> : ApiException {
		public TResult Result { get; private set; }

		public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException) {
			Result = result;
		}
	}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
